syntax = "proto3";

package openapitools.services.appsv1service;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import public "models/apps_v1.proto";
import public "models/meta.proto";

service AppsV1Service {
  rpc CreateAppsV1NamespacedControllerRevision (CreateAppsV1NamespacedControllerRevisionRequest) returns (ControllerRevision);

  rpc CreateAppsV1NamespacedDaemonSet (CreateAppsV1NamespacedDaemonSetRequest) returns (DaemonSet);

  rpc CreateAppsV1NamespacedDeployment (CreateAppsV1NamespacedDeploymentRequest) returns (Deployment);

  rpc CreateAppsV1NamespacedReplicaSet (CreateAppsV1NamespacedReplicaSetRequest) returns (ReplicaSet);

  rpc CreateAppsV1NamespacedStatefulSet (CreateAppsV1NamespacedStatefulSetRequest) returns (StatefulSet);

  rpc DeleteAppsV1CollectionNamespacedControllerRevision (DeleteAppsV1CollectionNamespacedControllerRevisionRequest) returns (Status);

  rpc DeleteAppsV1CollectionNamespacedDaemonSet (DeleteAppsV1CollectionNamespacedDaemonSetRequest) returns (Status);

  rpc DeleteAppsV1CollectionNamespacedDeployment (DeleteAppsV1CollectionNamespacedDeploymentRequest) returns (Status);

  rpc DeleteAppsV1CollectionNamespacedReplicaSet (DeleteAppsV1CollectionNamespacedReplicaSetRequest) returns (Status);

  rpc DeleteAppsV1CollectionNamespacedStatefulSet (DeleteAppsV1CollectionNamespacedStatefulSetRequest) returns (Status);

  rpc DeleteAppsV1NamespacedControllerRevision (DeleteAppsV1NamespacedControllerRevisionRequest) returns (Status);

  rpc DeleteAppsV1NamespacedDaemonSet (DeleteAppsV1NamespacedDaemonSetRequest) returns (Status);

  rpc DeleteAppsV1NamespacedDeployment (DeleteAppsV1NamespacedDeploymentRequest) returns (Status);

  rpc DeleteAppsV1NamespacedReplicaSet (DeleteAppsV1NamespacedReplicaSetRequest) returns (Status);

  rpc DeleteAppsV1NamespacedStatefulSet (DeleteAppsV1NamespacedStatefulSetRequest) returns (Status);

  rpc GetAppsV1APIResources (google.protobuf.Empty) returns (APIResourceList);

  rpc ListAppsV1ControllerRevisionForAllNamespaces (ListAppsV1ControllerRevisionForAllNamespacesRequest) returns (ControllerRevisionList);

  rpc ListAppsV1DaemonSetForAllNamespaces (ListAppsV1DaemonSetForAllNamespacesRequest) returns (DaemonSetList);

  rpc ListAppsV1DeploymentForAllNamespaces (ListAppsV1DeploymentForAllNamespacesRequest) returns (DeploymentList);

  rpc ListAppsV1NamespacedControllerRevision (ListAppsV1NamespacedControllerRevisionRequest) returns (ControllerRevisionList);

  rpc ListAppsV1NamespacedDaemonSet (ListAppsV1NamespacedDaemonSetRequest) returns (DaemonSetList);

  rpc ListAppsV1NamespacedDeployment (ListAppsV1NamespacedDeploymentRequest) returns (DeploymentList);

  rpc ListAppsV1NamespacedReplicaSet (ListAppsV1NamespacedReplicaSetRequest) returns (ReplicaSetList);

  rpc ListAppsV1NamespacedStatefulSet (ListAppsV1NamespacedStatefulSetRequest) returns (StatefulSetList);

  rpc ListAppsV1ReplicaSetForAllNamespaces (ListAppsV1ReplicaSetForAllNamespacesRequest) returns (ReplicaSetList);

  rpc ListAppsV1StatefulSetForAllNamespaces (ListAppsV1StatefulSetForAllNamespacesRequest) returns (StatefulSetList);

  rpc PatchAppsV1NamespacedControllerRevision (PatchAppsV1NamespacedControllerRevisionRequest) returns (ControllerRevision);

  rpc PatchAppsV1NamespacedDaemonSet (PatchAppsV1NamespacedDaemonSetRequest) returns (DaemonSet);

  rpc PatchAppsV1NamespacedDaemonSetStatus (PatchAppsV1NamespacedDaemonSetStatusRequest) returns (DaemonSet);

  rpc PatchAppsV1NamespacedDeployment (PatchAppsV1NamespacedDeploymentRequest) returns (Deployment);

  rpc PatchAppsV1NamespacedDeploymentScale (PatchAppsV1NamespacedDeploymentScaleRequest) returns (IoK8sApiAutoscalingV1Scale);

  rpc PatchAppsV1NamespacedDeploymentStatus (PatchAppsV1NamespacedDeploymentStatusRequest) returns (Deployment);

  rpc PatchAppsV1NamespacedReplicaSet (PatchAppsV1NamespacedReplicaSetRequest) returns (ReplicaSet);

  rpc PatchAppsV1NamespacedReplicaSetScale (PatchAppsV1NamespacedReplicaSetScaleRequest) returns (IoK8sApiAutoscalingV1Scale);

  rpc PatchAppsV1NamespacedReplicaSetStatus (PatchAppsV1NamespacedReplicaSetStatusRequest) returns (ReplicaSet);

  rpc PatchAppsV1NamespacedStatefulSet (PatchAppsV1NamespacedStatefulSetRequest) returns (StatefulSet);

  rpc PatchAppsV1NamespacedStatefulSetScale (PatchAppsV1NamespacedStatefulSetScaleRequest) returns (IoK8sApiAutoscalingV1Scale);

  rpc PatchAppsV1NamespacedStatefulSetStatus (PatchAppsV1NamespacedStatefulSetStatusRequest) returns (StatefulSet);

  rpc ReadAppsV1NamespacedControllerRevision (ReadAppsV1NamespacedControllerRevisionRequest) returns (ControllerRevision);

  rpc ReadAppsV1NamespacedDaemonSet (ReadAppsV1NamespacedDaemonSetRequest) returns (DaemonSet);

  rpc ReadAppsV1NamespacedDaemonSetStatus (ReadAppsV1NamespacedDaemonSetStatusRequest) returns (DaemonSet);

  rpc ReadAppsV1NamespacedDeployment (ReadAppsV1NamespacedDeploymentRequest) returns (Deployment);

  rpc ReadAppsV1NamespacedDeploymentScale (ReadAppsV1NamespacedDeploymentScaleRequest) returns (IoK8sApiAutoscalingV1Scale);

  rpc ReadAppsV1NamespacedDeploymentStatus (ReadAppsV1NamespacedDeploymentStatusRequest) returns (Deployment);

  rpc ReadAppsV1NamespacedReplicaSet (ReadAppsV1NamespacedReplicaSetRequest) returns (ReplicaSet);

  rpc ReadAppsV1NamespacedReplicaSetScale (ReadAppsV1NamespacedReplicaSetScaleRequest) returns (IoK8sApiAutoscalingV1Scale);

  rpc ReadAppsV1NamespacedReplicaSetStatus (ReadAppsV1NamespacedReplicaSetStatusRequest) returns (ReplicaSet);

  rpc ReadAppsV1NamespacedStatefulSet (ReadAppsV1NamespacedStatefulSetRequest) returns (StatefulSet);

  rpc ReadAppsV1NamespacedStatefulSetScale (ReadAppsV1NamespacedStatefulSetScaleRequest) returns (IoK8sApiAutoscalingV1Scale);

  rpc ReadAppsV1NamespacedStatefulSetStatus (ReadAppsV1NamespacedStatefulSetStatusRequest) returns (StatefulSet);

  rpc ReplaceAppsV1NamespacedControllerRevision (ReplaceAppsV1NamespacedControllerRevisionRequest) returns (ControllerRevision);

  rpc ReplaceAppsV1NamespacedDaemonSet (ReplaceAppsV1NamespacedDaemonSetRequest) returns (DaemonSet);

  rpc ReplaceAppsV1NamespacedDaemonSetStatus (ReplaceAppsV1NamespacedDaemonSetStatusRequest) returns (DaemonSet);

  rpc ReplaceAppsV1NamespacedDeployment (ReplaceAppsV1NamespacedDeploymentRequest) returns (Deployment);

  rpc ReplaceAppsV1NamespacedDeploymentScale (ReplaceAppsV1NamespacedDeploymentScaleRequest) returns (IoK8sApiAutoscalingV1Scale);

  rpc ReplaceAppsV1NamespacedDeploymentStatus (ReplaceAppsV1NamespacedDeploymentStatusRequest) returns (Deployment);

  rpc ReplaceAppsV1NamespacedReplicaSet (ReplaceAppsV1NamespacedReplicaSetRequest) returns (ReplicaSet);

  rpc ReplaceAppsV1NamespacedReplicaSetScale (ReplaceAppsV1NamespacedReplicaSetScaleRequest) returns (IoK8sApiAutoscalingV1Scale);

  rpc ReplaceAppsV1NamespacedReplicaSetStatus (ReplaceAppsV1NamespacedReplicaSetStatusRequest) returns (ReplicaSet);

  rpc ReplaceAppsV1NamespacedStatefulSet (ReplaceAppsV1NamespacedStatefulSetRequest) returns (StatefulSet);

  rpc ReplaceAppsV1NamespacedStatefulSetScale (ReplaceAppsV1NamespacedStatefulSetScaleRequest) returns (IoK8sApiAutoscalingV1Scale);

  rpc ReplaceAppsV1NamespacedStatefulSetStatus (ReplaceAppsV1NamespacedStatefulSetStatusRequest) returns (StatefulSet);

  rpc WatchAppsV1ControllerRevisionListForAllNamespaces (WatchAppsV1ControllerRevisionListForAllNamespacesRequest) returns (WatchEvent);

  rpc WatchAppsV1DaemonSetListForAllNamespaces (WatchAppsV1DaemonSetListForAllNamespacesRequest) returns (WatchEvent);

  rpc WatchAppsV1DeploymentListForAllNamespaces (WatchAppsV1DeploymentListForAllNamespacesRequest) returns (WatchEvent);

  rpc WatchAppsV1NamespacedControllerRevision (WatchAppsV1NamespacedControllerRevisionRequest) returns (WatchEvent);

  rpc WatchAppsV1NamespacedControllerRevisionList (WatchAppsV1NamespacedControllerRevisionListRequest) returns (WatchEvent);

  rpc WatchAppsV1NamespacedDaemonSet (WatchAppsV1NamespacedDaemonSetRequest) returns (WatchEvent);

  rpc WatchAppsV1NamespacedDaemonSetList (WatchAppsV1NamespacedDaemonSetListRequest) returns (WatchEvent);

  rpc WatchAppsV1NamespacedDeployment (WatchAppsV1NamespacedDeploymentRequest) returns (WatchEvent);

  rpc WatchAppsV1NamespacedDeploymentList (WatchAppsV1NamespacedDeploymentListRequest) returns (WatchEvent);

  rpc WatchAppsV1NamespacedReplicaSet (WatchAppsV1NamespacedReplicaSetRequest) returns (WatchEvent);

  rpc WatchAppsV1NamespacedReplicaSetList (WatchAppsV1NamespacedReplicaSetListRequest) returns (WatchEvent);

  rpc WatchAppsV1NamespacedStatefulSet (WatchAppsV1NamespacedStatefulSetRequest) returns (WatchEvent);

  rpc WatchAppsV1NamespacedStatefulSetList (WatchAppsV1NamespacedStatefulSetListRequest) returns (WatchEvent);

  rpc WatchAppsV1ReplicaSetListForAllNamespaces (WatchAppsV1ReplicaSetListForAllNamespacesRequest) returns (WatchEvent);

  rpc WatchAppsV1StatefulSetListForAllNamespaces (WatchAppsV1StatefulSetListForAllNamespacesRequest) returns (WatchEvent);

}

message CreateAppsV1NamespacedControllerRevisionRequest {
  // object name and auth scope, such as for teams and projects
  string namespace = 1;
  // If 'true', then the output is pretty printed.
  string pretty = 2;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 3;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  string fieldManager = 4;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 5;
  ControllerRevision ioK8sApiAppsV1ControllerRevision = 6;

}

message CreateAppsV1NamespacedDaemonSetRequest {
  // object name and auth scope, such as for teams and projects
  string namespace = 1;
  // If 'true', then the output is pretty printed.
  string pretty = 2;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 3;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  string fieldManager = 4;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 5;
  DaemonSet ioK8sApiAppsV1DaemonSet = 6;

}

message CreateAppsV1NamespacedDeploymentRequest {
  // object name and auth scope, such as for teams and projects
  string namespace = 1;
  // If 'true', then the output is pretty printed.
  string pretty = 2;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 3;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  string fieldManager = 4;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 5;
  Deployment ioK8sApiAppsV1Deployment = 6;

}

message CreateAppsV1NamespacedReplicaSetRequest {
  // object name and auth scope, such as for teams and projects
  string namespace = 1;
  // If 'true', then the output is pretty printed.
  string pretty = 2;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 3;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  string fieldManager = 4;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 5;
  ReplicaSet ioK8sApiAppsV1ReplicaSet = 6;

}

message CreateAppsV1NamespacedStatefulSetRequest {
  // object name and auth scope, such as for teams and projects
  string namespace = 1;
  // If 'true', then the output is pretty printed.
  string pretty = 2;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 3;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  string fieldManager = 4;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 5;
  StatefulSet ioK8sApiAppsV1StatefulSet = 6;

}

message DeleteAppsV1CollectionNamespacedControllerRevisionRequest {
  // object name and auth scope, such as for teams and projects
  string namespace = 1;
  // If 'true', then the output is pretty printed.
  string pretty = 2;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 5;
  // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  int32 gracePeriodSeconds = 6;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 7;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 8;
  // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
  bool orphanDependents = 9;
  // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
  string propagationPolicy = 10;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 11;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 12;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 13;
  DeleteOptions ioK8sApimachineryPkgApisMetaV1DeleteOptions = 14;

}

message DeleteAppsV1CollectionNamespacedDaemonSetRequest {
  // object name and auth scope, such as for teams and projects
  string namespace = 1;
  // If 'true', then the output is pretty printed.
  string pretty = 2;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 5;
  // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  int32 gracePeriodSeconds = 6;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 7;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 8;
  // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
  bool orphanDependents = 9;
  // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
  string propagationPolicy = 10;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 11;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 12;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 13;
  DeleteOptions ioK8sApimachineryPkgApisMetaV1DeleteOptions = 14;

}

message DeleteAppsV1CollectionNamespacedDeploymentRequest {
  // object name and auth scope, such as for teams and projects
  string namespace = 1;
  // If 'true', then the output is pretty printed.
  string pretty = 2;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 5;
  // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  int32 gracePeriodSeconds = 6;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 7;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 8;
  // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
  bool orphanDependents = 9;
  // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
  string propagationPolicy = 10;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 11;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 12;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 13;
  DeleteOptions ioK8sApimachineryPkgApisMetaV1DeleteOptions = 14;

}

message DeleteAppsV1CollectionNamespacedReplicaSetRequest {
  // object name and auth scope, such as for teams and projects
  string namespace = 1;
  // If 'true', then the output is pretty printed.
  string pretty = 2;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 5;
  // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  int32 gracePeriodSeconds = 6;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 7;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 8;
  // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
  bool orphanDependents = 9;
  // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
  string propagationPolicy = 10;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 11;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 12;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 13;
  DeleteOptions ioK8sApimachineryPkgApisMetaV1DeleteOptions = 14;

}

message DeleteAppsV1CollectionNamespacedStatefulSetRequest {
  // object name and auth scope, such as for teams and projects
  string namespace = 1;
  // If 'true', then the output is pretty printed.
  string pretty = 2;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 5;
  // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  int32 gracePeriodSeconds = 6;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 7;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 8;
  // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
  bool orphanDependents = 9;
  // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
  string propagationPolicy = 10;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 11;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 12;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 13;
  DeleteOptions ioK8sApimachineryPkgApisMetaV1DeleteOptions = 14;

}

message DeleteAppsV1NamespacedControllerRevisionRequest {
  // name of the ControllerRevision
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  int32 gracePeriodSeconds = 5;
  // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
  bool orphanDependents = 6;
  // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
  string propagationPolicy = 7;
  DeleteOptions ioK8sApimachineryPkgApisMetaV1DeleteOptions = 8;

}

message DeleteAppsV1NamespacedDaemonSetRequest {
  // name of the DaemonSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  int32 gracePeriodSeconds = 5;
  // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
  bool orphanDependents = 6;
  // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
  string propagationPolicy = 7;
  DeleteOptions ioK8sApimachineryPkgApisMetaV1DeleteOptions = 8;

}

message DeleteAppsV1NamespacedDeploymentRequest {
  // name of the Deployment
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  int32 gracePeriodSeconds = 5;
  // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
  bool orphanDependents = 6;
  // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
  string propagationPolicy = 7;
  DeleteOptions ioK8sApimachineryPkgApisMetaV1DeleteOptions = 8;

}

message DeleteAppsV1NamespacedReplicaSetRequest {
  // name of the ReplicaSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  int32 gracePeriodSeconds = 5;
  // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
  bool orphanDependents = 6;
  // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
  string propagationPolicy = 7;
  DeleteOptions ioK8sApimachineryPkgApisMetaV1DeleteOptions = 8;

}

message DeleteAppsV1NamespacedStatefulSetRequest {
  // name of the StatefulSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  int32 gracePeriodSeconds = 5;
  // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
  bool orphanDependents = 6;
  // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
  string propagationPolicy = 7;
  DeleteOptions ioK8sApimachineryPkgApisMetaV1DeleteOptions = 8;

}

message ListAppsV1ControllerRevisionForAllNamespacesRequest {
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 1;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 2;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 3;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 4;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 5;
  // If 'true', then the output is pretty printed.
  string pretty = 6;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 7;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 8;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 9;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 10;

}

message ListAppsV1DaemonSetForAllNamespacesRequest {
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 1;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 2;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 3;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 4;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 5;
  // If 'true', then the output is pretty printed.
  string pretty = 6;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 7;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 8;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 9;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 10;

}

message ListAppsV1DeploymentForAllNamespacesRequest {
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 1;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 2;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 3;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 4;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 5;
  // If 'true', then the output is pretty printed.
  string pretty = 6;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 7;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 8;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 9;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 10;

}

message ListAppsV1NamespacedControllerRevisionRequest {
  // object name and auth scope, such as for teams and projects
  string namespace = 1;
  // If 'true', then the output is pretty printed.
  string pretty = 2;
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 3;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 4;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 5;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 6;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 7;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 8;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 9;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 10;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 11;

}

message ListAppsV1NamespacedDaemonSetRequest {
  // object name and auth scope, such as for teams and projects
  string namespace = 1;
  // If 'true', then the output is pretty printed.
  string pretty = 2;
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 3;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 4;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 5;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 6;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 7;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 8;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 9;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 10;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 11;

}

message ListAppsV1NamespacedDeploymentRequest {
  // object name and auth scope, such as for teams and projects
  string namespace = 1;
  // If 'true', then the output is pretty printed.
  string pretty = 2;
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 3;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 4;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 5;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 6;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 7;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 8;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 9;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 10;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 11;

}

message ListAppsV1NamespacedReplicaSetRequest {
  // object name and auth scope, such as for teams and projects
  string namespace = 1;
  // If 'true', then the output is pretty printed.
  string pretty = 2;
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 3;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 4;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 5;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 6;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 7;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 8;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 9;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 10;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 11;

}

message ListAppsV1NamespacedStatefulSetRequest {
  // object name and auth scope, such as for teams and projects
  string namespace = 1;
  // If 'true', then the output is pretty printed.
  string pretty = 2;
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 3;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 4;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 5;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 6;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 7;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 8;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 9;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 10;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 11;

}

message ListAppsV1ReplicaSetForAllNamespacesRequest {
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 1;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 2;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 3;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 4;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 5;
  // If 'true', then the output is pretty printed.
  string pretty = 6;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 7;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 8;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 9;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 10;

}

message ListAppsV1StatefulSetForAllNamespacesRequest {
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 1;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 2;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 3;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 4;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 5;
  // If 'true', then the output is pretty printed.
  string pretty = 6;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 7;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 8;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 9;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 10;

}

message PatchAppsV1NamespacedControllerRevisionRequest {
  // name of the ControllerRevision
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  // Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
  bool force = 7;
  google.protobuf.Struct body = 8;

}

message PatchAppsV1NamespacedDaemonSetRequest {
  // name of the DaemonSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  // Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
  bool force = 7;
  google.protobuf.Struct body = 8;

}

message PatchAppsV1NamespacedDaemonSetStatusRequest {
  // name of the DaemonSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  // Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
  bool force = 7;
  google.protobuf.Struct body = 8;

}

message PatchAppsV1NamespacedDeploymentRequest {
  // name of the Deployment
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  // Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
  bool force = 7;
  google.protobuf.Struct body = 8;

}

message PatchAppsV1NamespacedDeploymentScaleRequest {
  // name of the Scale
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  // Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
  bool force = 7;
  google.protobuf.Struct body = 8;

}

message PatchAppsV1NamespacedDeploymentStatusRequest {
  // name of the Deployment
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  // Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
  bool force = 7;
  google.protobuf.Struct body = 8;

}

message PatchAppsV1NamespacedReplicaSetRequest {
  // name of the ReplicaSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  // Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
  bool force = 7;
  google.protobuf.Struct body = 8;

}

message PatchAppsV1NamespacedReplicaSetScaleRequest {
  // name of the Scale
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  // Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
  bool force = 7;
  google.protobuf.Struct body = 8;

}

message PatchAppsV1NamespacedReplicaSetStatusRequest {
  // name of the ReplicaSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  // Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
  bool force = 7;
  google.protobuf.Struct body = 8;

}

message PatchAppsV1NamespacedStatefulSetRequest {
  // name of the StatefulSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  // Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
  bool force = 7;
  google.protobuf.Struct body = 8;

}

message PatchAppsV1NamespacedStatefulSetScaleRequest {
  // name of the Scale
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  // Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
  bool force = 7;
  google.protobuf.Struct body = 8;

}

message PatchAppsV1NamespacedStatefulSetStatusRequest {
  // name of the StatefulSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  // Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
  bool force = 7;
  google.protobuf.Struct body = 8;

}

message ReadAppsV1NamespacedControllerRevisionRequest {
  // name of the ControllerRevision
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;

}

message ReadAppsV1NamespacedDaemonSetRequest {
  // name of the DaemonSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;

}

message ReadAppsV1NamespacedDaemonSetStatusRequest {
  // name of the DaemonSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;

}

message ReadAppsV1NamespacedDeploymentRequest {
  // name of the Deployment
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;

}

message ReadAppsV1NamespacedDeploymentScaleRequest {
  // name of the Scale
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;

}

message ReadAppsV1NamespacedDeploymentStatusRequest {
  // name of the Deployment
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;

}

message ReadAppsV1NamespacedReplicaSetRequest {
  // name of the ReplicaSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;

}

message ReadAppsV1NamespacedReplicaSetScaleRequest {
  // name of the Scale
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;

}

message ReadAppsV1NamespacedReplicaSetStatusRequest {
  // name of the ReplicaSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;

}

message ReadAppsV1NamespacedStatefulSetRequest {
  // name of the StatefulSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;

}

message ReadAppsV1NamespacedStatefulSetScaleRequest {
  // name of the Scale
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;

}

message ReadAppsV1NamespacedStatefulSetStatusRequest {
  // name of the StatefulSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;

}

message ReplaceAppsV1NamespacedControllerRevisionRequest {
  // name of the ControllerRevision
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  ControllerRevision ioK8sApiAppsV1ControllerRevision = 7;

}

message ReplaceAppsV1NamespacedDaemonSetRequest {
  // name of the DaemonSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  DaemonSet ioK8sApiAppsV1DaemonSet = 7;

}

message ReplaceAppsV1NamespacedDaemonSetStatusRequest {
  // name of the DaemonSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  DaemonSet ioK8sApiAppsV1DaemonSet = 7;

}

message ReplaceAppsV1NamespacedDeploymentRequest {
  // name of the Deployment
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  Deployment ioK8sApiAppsV1Deployment = 7;

}

message ReplaceAppsV1NamespacedDeploymentScaleRequest {
  // name of the Scale
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  IoK8sApiAutoscalingV1Scale ioK8sApiAutoscalingV1Scale = 7;

}

message ReplaceAppsV1NamespacedDeploymentStatusRequest {
  // name of the Deployment
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  Deployment ioK8sApiAppsV1Deployment = 7;

}

message ReplaceAppsV1NamespacedReplicaSetRequest {
  // name of the ReplicaSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  ReplicaSet ioK8sApiAppsV1ReplicaSet = 7;

}

message ReplaceAppsV1NamespacedReplicaSetScaleRequest {
  // name of the Scale
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  IoK8sApiAutoscalingV1Scale ioK8sApiAutoscalingV1Scale = 7;

}

message ReplaceAppsV1NamespacedReplicaSetStatusRequest {
  // name of the ReplicaSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  ReplicaSet ioK8sApiAppsV1ReplicaSet = 7;

}

message ReplaceAppsV1NamespacedStatefulSetRequest {
  // name of the StatefulSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  StatefulSet ioK8sApiAppsV1StatefulSet = 7;

}

message ReplaceAppsV1NamespacedStatefulSetScaleRequest {
  // name of the Scale
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  IoK8sApiAutoscalingV1Scale ioK8sApiAutoscalingV1Scale = 7;

}

message ReplaceAppsV1NamespacedStatefulSetStatusRequest {
  // name of the StatefulSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // If 'true', then the output is pretty printed.
  string pretty = 3;
  // When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  string dryRun = 4;
  // fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  string fieldManager = 5;
  // fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  string fieldValidation = 6;
  StatefulSet ioK8sApiAppsV1StatefulSet = 7;

}

message WatchAppsV1ControllerRevisionListForAllNamespacesRequest {
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 1;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 2;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 3;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 4;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 5;
  // If 'true', then the output is pretty printed.
  string pretty = 6;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 7;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 8;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 9;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 10;

}

message WatchAppsV1DaemonSetListForAllNamespacesRequest {
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 1;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 2;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 3;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 4;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 5;
  // If 'true', then the output is pretty printed.
  string pretty = 6;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 7;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 8;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 9;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 10;

}

message WatchAppsV1DeploymentListForAllNamespacesRequest {
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 1;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 2;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 3;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 4;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 5;
  // If 'true', then the output is pretty printed.
  string pretty = 6;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 7;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 8;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 9;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 10;

}

message WatchAppsV1NamespacedControllerRevisionRequest {
  // name of the ControllerRevision
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 3;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 4;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 5;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 6;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 7;
  // If 'true', then the output is pretty printed.
  string pretty = 8;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 9;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 10;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 11;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 12;

}

message WatchAppsV1NamespacedControllerRevisionListRequest {
  // object name and auth scope, such as for teams and projects
  string namespace = 1;
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 2;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 3;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 4;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 5;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 6;
  // If 'true', then the output is pretty printed.
  string pretty = 7;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 8;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 9;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 10;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 11;

}

message WatchAppsV1NamespacedDaemonSetRequest {
  // name of the DaemonSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 3;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 4;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 5;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 6;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 7;
  // If 'true', then the output is pretty printed.
  string pretty = 8;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 9;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 10;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 11;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 12;

}

message WatchAppsV1NamespacedDaemonSetListRequest {
  // object name and auth scope, such as for teams and projects
  string namespace = 1;
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 2;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 3;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 4;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 5;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 6;
  // If 'true', then the output is pretty printed.
  string pretty = 7;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 8;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 9;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 10;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 11;

}

message WatchAppsV1NamespacedDeploymentRequest {
  // name of the Deployment
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 3;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 4;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 5;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 6;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 7;
  // If 'true', then the output is pretty printed.
  string pretty = 8;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 9;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 10;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 11;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 12;

}

message WatchAppsV1NamespacedDeploymentListRequest {
  // object name and auth scope, such as for teams and projects
  string namespace = 1;
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 2;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 3;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 4;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 5;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 6;
  // If 'true', then the output is pretty printed.
  string pretty = 7;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 8;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 9;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 10;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 11;

}

message WatchAppsV1NamespacedReplicaSetRequest {
  // name of the ReplicaSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 3;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 4;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 5;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 6;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 7;
  // If 'true', then the output is pretty printed.
  string pretty = 8;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 9;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 10;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 11;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 12;

}

message WatchAppsV1NamespacedReplicaSetListRequest {
  // object name and auth scope, such as for teams and projects
  string namespace = 1;
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 2;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 3;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 4;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 5;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 6;
  // If 'true', then the output is pretty printed.
  string pretty = 7;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 8;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 9;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 10;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 11;

}

message WatchAppsV1NamespacedStatefulSetRequest {
  // name of the StatefulSet
  string name = 1;
  // object name and auth scope, such as for teams and projects
  string namespace = 2;
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 3;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 4;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 5;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 6;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 7;
  // If 'true', then the output is pretty printed.
  string pretty = 8;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 9;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 10;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 11;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 12;

}

message WatchAppsV1NamespacedStatefulSetListRequest {
  // object name and auth scope, such as for teams and projects
  string namespace = 1;
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 2;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 3;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 4;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 5;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 6;
  // If 'true', then the output is pretty printed.
  string pretty = 7;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 8;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 9;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 10;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 11;

}

message WatchAppsV1ReplicaSetListForAllNamespacesRequest {
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 1;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 2;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 3;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 4;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 5;
  // If 'true', then the output is pretty printed.
  string pretty = 6;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 7;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 8;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 9;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 10;

}

message WatchAppsV1StatefulSetListForAllNamespacesRequest {
  // allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  bool allowWatchBookmarks = 1;
  // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  string continue = 2;
  // A selector to restrict the list of returned objects by their fields. Defaults to everything.
  string fieldSelector = 3;
  // A selector to restrict the list of returned objects by their labels. Defaults to everything.
  string labelSelector = 4;
  // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  int32 limit = 5;
  // If 'true', then the output is pretty printed.
  string pretty = 6;
  // resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersion = 7;
  // resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
  string resourceVersionMatch = 8;
  // Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  int32 timeoutSeconds = 9;
  // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  bool watch = 10;

}
